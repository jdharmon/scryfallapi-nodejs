/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from '../models';


/**
 * @class
 * Sets
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ScryfallClient.
 */
export interface Sets {


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SetList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SetList>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SetList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SetList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SetList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SetList>;
    getAll(callback: ServiceCallback<models.SetList>): void;
    getAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SetList>): void;


    /**
     * @param {string} code
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Set>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByCodeWithHttpOperationResponse(code: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Set>>;

    /**
     * @param {string} code
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Set} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Set} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Set} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByCode(code: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Set>;
    getByCode(code: string, callback: ServiceCallback<models.Set>): void;
    getByCode(code: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Set>): void;
}

/**
 * @class
 * Cards
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ScryfallClient.
 */
export interface Cards {


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.page]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CardList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithHttpOperationResponse(options?: { page? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CardList>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.page]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CardList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CardList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CardList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAll(options?: { page? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CardList>;
    getAll(callback: ServiceCallback<models.CardList>): void;
    getAll(options: { page? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CardList>): void;


    /**
     * @param {string} q
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.unique] Possible values include: 'cards', 'art',
     * 'prints'
     *
     * @param {string} [options.order] Possible values include: 'name', 'set',
     * 'released', 'rarity', 'color', 'usd', 'tix', 'eur', 'cmc', 'power',
     * 'toughness', 'edhrec', 'artist'
     *
     * @param {string} [options.dir] Possible values include: 'auto', 'asc', 'desc'
     *
     * @param {boolean} [options.includeExtras]
     *
     * @param {number} [options.page]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CardList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    searchWithHttpOperationResponse(q: string, options?: { unique? : string, order? : string, dir? : string, includeExtras? : boolean, page? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CardList>>;

    /**
     * @param {string} q
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.unique] Possible values include: 'cards', 'art',
     * 'prints'
     *
     * @param {string} [options.order] Possible values include: 'name', 'set',
     * 'released', 'rarity', 'color', 'usd', 'tix', 'eur', 'cmc', 'power',
     * 'toughness', 'edhrec', 'artist'
     *
     * @param {string} [options.dir] Possible values include: 'auto', 'asc', 'desc'
     *
     * @param {boolean} [options.includeExtras]
     *
     * @param {number} [options.page]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CardList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CardList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CardList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    search(q: string, options?: { unique? : string, order? : string, dir? : string, includeExtras? : boolean, page? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CardList>;
    search(q: string, callback: ServiceCallback<models.CardList>): void;
    search(q: string, options: { unique? : string, order? : string, dir? : string, includeExtras? : boolean, page? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CardList>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.exact]
     *
     * @param {string} [options.fuzzy]
     *
     * @param {string} [options.set]
     *
     * @param {string} [options.format]
     *
     * @param {string} [options.face]
     *
     * @param {string} [options.version]
     *
     * @param {boolean} [options.pretty]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Card>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getNamedWithHttpOperationResponse(options?: { exact? : string, fuzzy? : string, set? : string, format? : string, face? : string, version? : string, pretty? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Card>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {string} [options.exact]
     *
     * @param {string} [options.fuzzy]
     *
     * @param {string} [options.set]
     *
     * @param {string} [options.format]
     *
     * @param {string} [options.face]
     *
     * @param {string} [options.version]
     *
     * @param {boolean} [options.pretty]
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Card} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Card} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Card} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getNamed(options?: { exact? : string, fuzzy? : string, set? : string, format? : string, face? : string, version? : string, pretty? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.Card>;
    getNamed(callback: ServiceCallback<models.Card>): void;
    getNamed(options: { exact? : string, fuzzy? : string, set? : string, format? : string, face? : string, version? : string, pretty? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Card>): void;


    /**
     * @param {string} q
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    autocompleteWithHttpOperationResponse(q: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {string} q
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    autocomplete(q: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    autocomplete(q: string, callback: ServiceCallback<models.Catalog>): void;
    autocomplete(q: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Card>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getRandomWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Card>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Card} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Card} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Card} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getRandom(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Card>;
    getRandom(callback: ServiceCallback<models.Card>): void;
    getRandom(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Card>): void;


    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Card>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByMultiverseIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Card>>;

    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Card} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Card} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Card} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByMultiverseId(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Card>;
    getByMultiverseId(id: number, callback: ServiceCallback<models.Card>): void;
    getByMultiverseId(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Card>): void;


    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Card>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByMtgoIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Card>>;

    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Card} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Card} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Card} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByMtgoId(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Card>;
    getByMtgoId(id: number, callback: ServiceCallback<models.Card>): void;
    getByMtgoId(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Card>): void;


    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Card>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByArenaIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Card>>;

    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Card} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Card} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Card} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByArenaId(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Card>;
    getByArenaId(id: number, callback: ServiceCallback<models.Card>): void;
    getByArenaId(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Card>): void;


    /**
     * @param {string} code
     *
     * @param {number} number
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Card>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByCodeByNumberWithHttpOperationResponse(code: string, number: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Card>>;

    /**
     * @param {string} code
     *
     * @param {number} number
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Card} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Card} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Card} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByCodeByNumber(code: string, number: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Card>;
    getByCodeByNumber(code: string, number: number, callback: ServiceCallback<models.Card>): void;
    getByCodeByNumber(code: string, number: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Card>): void;


    /**
     * @param {uuid} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Card>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByIdWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Card>>;

    /**
     * @param {uuid} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Card} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Card} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Card} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getById(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Card>;
    getById(id: string, callback: ServiceCallback<models.Card>): void;
    getById(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Card>): void;
}

/**
 * @class
 * Rulings
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ScryfallClient.
 */
export interface Rulings {


    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RulingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByMultiverseIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RulingList>>;

    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RulingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RulingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RulingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByMultiverseId(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RulingList>;
    getByMultiverseId(id: number, callback: ServiceCallback<models.RulingList>): void;
    getByMultiverseId(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RulingList>): void;


    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RulingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByMtgoIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RulingList>>;

    /**
     * @param {number} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RulingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RulingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RulingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByMtgoId(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RulingList>;
    getByMtgoId(id: number, callback: ServiceCallback<models.RulingList>): void;
    getByMtgoId(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RulingList>): void;


    /**
     * @param {string} code
     *
     * @param {number} number
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RulingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByCodeByNumberIdWithHttpOperationResponse(code: string, number: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RulingList>>;

    /**
     * @param {string} code
     *
     * @param {number} number
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RulingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RulingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RulingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getByCodeByNumberId(code: string, number: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RulingList>;
    getByCodeByNumberId(code: string, number: number, callback: ServiceCallback<models.RulingList>): void;
    getByCodeByNumberId(code: string, number: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RulingList>): void;


    /**
     * @param {uuid} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<RulingList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getByIdWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.RulingList>>;

    /**
     * @param {uuid} id
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {RulingList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {RulingList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link RulingList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getById(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.RulingList>;
    getById(id: string, callback: ServiceCallback<models.RulingList>): void;
    getById(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.RulingList>): void;
}

/**
 * @class
 * Symbology
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ScryfallClient.
 */
export interface Symbology {


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<CardSymbolList>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAllWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CardSymbolList>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {CardSymbolList} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {CardSymbolList} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link CardSymbolList} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAll(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CardSymbolList>;
    getAll(callback: ServiceCallback<models.CardSymbolList>): void;
    getAll(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CardSymbolList>): void;


    /**
     * @param {string} cost
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<ManaCost>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    parseManaWithHttpOperationResponse(cost: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ManaCost>>;

    /**
     * @param {string} cost
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {ManaCost} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {ManaCost} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link ManaCost} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    parseMana(cost: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ManaCost>;
    parseMana(cost: string, callback: ServiceCallback<models.ManaCost>): void;
    parseMana(cost: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ManaCost>): void;
}

/**
 * @class
 * CatalogOperations
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the ScryfallClient.
 */
export interface CatalogOperations {


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCardNamesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCardNames(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getCardNames(callback: ServiceCallback<models.Catalog>): void;
    getCardNames(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWordBankWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getWordBank(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getWordBank(callback: ServiceCallback<models.Catalog>): void;
    getWordBank(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getCreatureTypesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getCreatureTypes(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getCreatureTypes(callback: ServiceCallback<models.Catalog>): void;
    getCreatureTypes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPlaneswalkerTypesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPlaneswalkerTypes(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getPlaneswalkerTypes(callback: ServiceCallback<models.Catalog>): void;
    getPlaneswalkerTypes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLandTypesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLandTypes(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getLandTypes(callback: ServiceCallback<models.Catalog>): void;
    getLandTypes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getArtifactTypesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getArtifactTypes(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getArtifactTypes(callback: ServiceCallback<models.Catalog>): void;
    getArtifactTypes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEnchantmentTypesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEnchantmentTypes(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getEnchantmentTypes(callback: ServiceCallback<models.Catalog>): void;
    getEnchantmentTypes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getSpellTypesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getSpellTypes(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getSpellTypes(callback: ServiceCallback<models.Catalog>): void;
    getSpellTypes(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPowersWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getPowers(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getPowers(callback: ServiceCallback<models.Catalog>): void;
    getPowers(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getToughnessesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getToughnesses(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getToughnesses(callback: ServiceCallback<models.Catalog>): void;
    getToughnesses(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getLoyaltiesWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getLoyalties(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getLoyalties(callback: ServiceCallback<models.Catalog>): void;
    getLoyalties(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;


    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Catalog>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWatermarksWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Catalog>>;

    /**
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Catalog} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Catalog} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Catalog} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getWatermarks(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Catalog>;
    getWatermarks(callback: ServiceCallback<models.Catalog>): void;
    getWatermarks(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Catalog>): void;
}
